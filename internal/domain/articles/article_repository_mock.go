// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/articles/article_repository.go

// Package articles is a generated GoMock package.
package articles

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockArticleRepository is a mock of ArticleRepository interface.
type MockArticleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockArticleRepositoryMockRecorder
}

// MockArticleRepositoryMockRecorder is the mock recorder for MockArticleRepository.
type MockArticleRepositoryMockRecorder struct {
	mock *MockArticleRepository
}

// NewMockArticleRepository creates a new mock instance.
func NewMockArticleRepository(ctrl *gomock.Controller) *MockArticleRepository {
	mock := &MockArticleRepository{ctrl: ctrl}
	mock.recorder = &MockArticleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArticleRepository) EXPECT() *MockArticleRepositoryMockRecorder {
	return m.recorder
}

// FindByAuthor mocks base method.
func (m *MockArticleRepository) FindByAuthor(ctx context.Context, authorID string, whence, pageSize int64) ([]*Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByAuthor", ctx, authorID, whence, pageSize)
	ret0, _ := ret[0].([]*Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByAuthor indicates an expected call of FindByAuthor.
func (mr *MockArticleRepositoryMockRecorder) FindByAuthor(ctx, authorID, whence, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByAuthor", reflect.TypeOf((*MockArticleRepository)(nil).FindByAuthor), ctx, authorID, whence, pageSize)
}

// FindByID mocks base method.
func (m *MockArticleRepository) FindByID(ctx context.Context, id string) (*Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockArticleRepositoryMockRecorder) FindByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockArticleRepository)(nil).FindByID), ctx, id)
}

// FindSamples mocks base method.
func (m *MockArticleRepository) FindSamples(ctx context.Context, whence, limit int64) ([]*Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSamples", ctx, whence, limit)
	ret0, _ := ret[0].([]*Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSamples indicates an expected call of FindSamples.
func (mr *MockArticleRepositoryMockRecorder) FindSamples(ctx, whence, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSamples", reflect.TypeOf((*MockArticleRepository)(nil).FindSamples), ctx, whence, limit)
}

// Store mocks base method.
func (m *MockArticleRepository) Store(ctx context.Context, article *Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, article)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockArticleRepositoryMockRecorder) Store(ctx, article interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockArticleRepository)(nil).Store), ctx, article)
}

// Update mocks base method.
func (m *MockArticleRepository) Update(ctx context.Context, article *Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, article)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockArticleRepositoryMockRecorder) Update(ctx, article interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockArticleRepository)(nil).Update), ctx, article)
}
